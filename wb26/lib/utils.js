'use strict';

const utils = module.exports = {};

utils.map = function(arr, callback) {
  //validate input
  if (!arr || !callback) return null;
  if (!Array.isArray(arr)) return null;
  if(typeof callback !== 'function') return null;
  //create empty array to return manipulated elements
  let result = [];
  //push into new array after performing callback
  for(let i in arr) {
    result.push(callback(arr[i]));
  }
  //return new array with same length
  return result;
};

utils.filter = function(arr, callback) {
  //validate input
  if (!arr || !callback) return null;
  if (!Array.isArray(arr)) return null;
  if(typeof callback !== 'function') return null;
  //create empty array to return elements that meet condition
  let result = [];
  //check each array element against callback condition
  for(let i in arr) {
    if(callback(arr[i])) result.push(arr[i]);
  }
  //return new array with new number of elements - could be same
  return result;
};

utils.reduce = function(arr, callback, val) {
  //validate input
  if (!arr || !callback) return null;
  if (!Array.isArray(arr)) return null;
  if(typeof callback !== 'function') return null;
  //set the initial value - optional
  let result = val;
  let copy = new Array(...arr);
  //generate a result based on the callback and the intial value
  for(let i in copy) {
    result = callback(result, copy[i]);
  }
  //return a single value generated by callback
  return result;
};
